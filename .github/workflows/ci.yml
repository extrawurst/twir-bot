name: CI

on:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: extrawurst/twir-bot

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
    - name: check
      run: |
        cargo c
    - name: build
      run: |
        cargo b
    - name: clippy
      run: |
        cargo clippy
    - name: test
      run: |
        cargo t

  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - uses: actions/checkout@master
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: build
      run: |
        cargo b --release
    - name: rename
      run: |
        mkdir bin
        mv target/release/twir-bot bin/server
    - 
      name: size
      run: ls -l bin/server  
    - 
      name: Login to Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - 
      name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - 
      name: docker build and push
      uses: docker/build-push-action@v2
      with:
        push: true
        context: .
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
    - run: cargo fmt -- --check
    - name: cargo-sort
      run: |
        cargo install cargo-sort --force
        cargo sort -c -w